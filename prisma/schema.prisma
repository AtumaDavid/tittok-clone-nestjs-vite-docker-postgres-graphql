// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  fullname String
  bio String?
  image String?
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  posts Post[]
  comments Comment[]
  likes Like[]
}

model Post{
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  text String
  video String
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  comments Comment[]
  likes Like[]
}

model Comment{
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  postId Int @map("post_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)// when user is deletd it deletes the comments
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) //when post is deleted, it deletes the comments
  text String
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model Like{
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  postId Int @map("post_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)// when user is deletd it deletes the comments
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) //when post is deleted, it deletes the comments
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([userId, postId]) //user id and post id must always be unique. (user cant like a post multiple times)
}